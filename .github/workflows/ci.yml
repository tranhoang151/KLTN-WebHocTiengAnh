name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  DOTNET_VERSION: '8.0.x'

jobs:
  # Frontend Testing Job
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint
      
    - name: Run unit tests with coverage
      working-directory: ./frontend
      run: npm run test:coverage
      
    - name: Run integration tests
      working-directory: ./frontend
      run: npm run test:integration
      
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Archive frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/

  # Backend Testing Job
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore backend dependencies
      working-directory: ./backend
      run: dotnet restore
      
    - name: Build backend
      working-directory: ./backend
      run: dotnet build --no-restore --configuration Release
      
    - name: Run unit tests with coverage
      working-directory: ./backend
      run: |
        dotnet test --no-build --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          --logger trx
          
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/TestResults/*/coverage.cobertura.xml
        flags: backend
        name: backend-coverage
        
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Backend Test Results
        path: backend/TestResults/*.trx
        reporter: dotnet-trx

  # Security Vulnerability Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js for frontend security scan
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run npm audit for frontend
      working-directory: ./frontend
      run: |
        npm audit --audit-level=moderate --json > frontend-audit.json || true
        
    - name: Setup .NET for backend security scan
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install security scanning tools
      run: |
        dotnet tool install --global security-scan
        npm install -g audit-ci
        
    - name: Run security scan on backend
      working-directory: ./backend
      run: |
        security-scan BingGoWebAPI.csproj --export backend-security.json || true
        
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=frontend/package.json --json > snyk-results.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          frontend-audit.json
          backend-security.json
          snyk-results.json

  # Performance Testing Job
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Build application
      working-directory: ./frontend
      run: npm run build
      
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
      
    - name: Run Lighthouse CI
      working-directory: ./frontend
      run: |
        lhci autorun --config=.lighthouserc.json || echo "Lighthouse CI completed with warnings"
        
    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lighthouse-results
        path: .lighthouseci/

  # Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Integration Tests with Docker
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    services:
      firebase-emulator:
        image: firebase/firebase-tools:latest
        ports:
          - 9099:9099
          - 8080:8080
          - 5001:5001
        options: >-
          --health-cmd "curl -f http://localhost:9099 || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Install backend dependencies
      working-directory: ./backend
      run: dotnet restore
      
    - name: Start Firebase Emulators
      run: |
        npm install -g firebase-tools
        firebase emulators:start --only auth,firestore,storage --project demo-project &
        sleep 10
        
    - name: Build and start backend
      working-directory: ./backend
      run: |
        dotnet build --configuration Release
        dotnet run --configuration Release &
        sleep 15
        
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Start frontend server
      working-directory: ./frontend
      run: |
        npm install -g serve
        serve -s build -l 3000 &
        sleep 10
        
    - name: Run integration tests
      working-directory: ./frontend
      run: npm run test:integration:ci
      
    - name: Run API integration tests
      working-directory: ./backend
      run: dotnet test Tests/ --filter Category=Integration --configuration Release

  # Deployment Readiness Check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, security-scan, performance-tests, integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate deployment report
      run: |
        echo "# Deployment Readiness Report" > deployment-report.md
        echo "## Test Results Summary" >> deployment-report.md
        echo "- Frontend Tests: âœ… Passed" >> deployment-report.md
        echo "- Backend Tests: âœ… Passed" >> deployment-report.md
        echo "- Security Scan: âœ… Completed" >> deployment-report.md
        echo "- Performance Tests: âœ… Completed" >> deployment-report.md
        echo "- Integration Tests: âœ… Passed" >> deployment-report.md
        echo "## Artifacts Generated" >> deployment-report.md
        ls -la >> deployment-report.md
        
    - name: Upload deployment report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: deployment-report.md
        
    - name: Notify deployment readiness
      if: success()
      run: |
        echo "ðŸš€ Application is ready for deployment!"
        echo "All tests passed and security checks completed."